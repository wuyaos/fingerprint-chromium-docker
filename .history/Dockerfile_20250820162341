# syntax=docker/dockerfile:1.6
# Alpine-based image with glibc, Xvfb, VNC, noVNC and fingerprint-chromium

ARG ALPINE_VERSION=3.19
FROM alpine:${ALPINE_VERSION}

# ------- Build args & envs -------
ARG FC_VERSION=136.0.7103.113
# Check the release page for a newer matching Linux tarball name if needed
ARG FC_TARBALL="ungoogled-chromium_${FC_VERSION}-1_linux.tar.xz"
ARG FC_URL="https://github.com/adryfish/fingerprint-chromium/releases/download/${FC_VERSION}/${FC_TARBALL}"

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8 \
    DISPLAY=:0 \
    SCREEN_WIDTH=1280 \
    SCREEN_HEIGHT=800 \
    SCREEN_DEPTH=24 \
    VNC_PASSWORD=changeme \
    TZ=Asia/Shanghai \
    TIMEZONE=Asia/Shanghai \
    FINGERPRINT_SEED=1000 \
    FINGERPRINT_PLATFORM=linux \
    FINGERPRINT_BRAND=Chrome \
    FINGERPRINT_BRAND_VERSION="" \
    ACCEPT_LANG="zh-CN,zh" \
    BROWSER_LANG="zh-CN" \
    PROXY_SERVER="" \
    CHROME_EXTRA_ARGS="" \
    REMOTE_DEBUGGING_PORT=9222

# ------- Install basic tools, glibc and runtime deps -------
# Install glibc from sgerrand (Chromium requires glibc; Alpine uses musl)
RUN set -eux; \
    apk add --no-cache --virtual .build-deps curl tar ca-certificates binutils xz; \
    apk add --no-cache tzdata bash su-exec shadow; \
    # glibc from sgerrand
    GLIBC_VER=2.35-r1; \
    curl -fsSL -o /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub; \
    curl -fsSL -o /tmp/glibc.apk https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk; \
    curl -fsSL -o /tmp/glibc-bin.apk https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk; \
    apk add --no-cache /tmp/glibc.apk /tmp/glibc-bin.apk; \
    # Common Chromium runtime deps on Alpine
    apk add --no-cache \
      xorg-server-xvfb x11vnc openbox ttf-dejavu ttf-liberation font-noto-emoji \
      novnc websockify \
      nss freetype harfbuzz \
      libx11 libxcomposite libxdamage libxi libxrandr libxrender libxtst \
      libxext libxfixes libxkbcommon \
      libdrm libgbm mesa-gl \
      alsa-lib at-spi2-core gtk+3.0 \
      udev ttf-freefont \
      unzip; \
    update-ca-certificates; \
    mkdir -p /opt /opt/browser /work /var/log/supervisor /root/.config; \
    rm -rf /var/cache/apk/* /tmp/*.apk

# ------- Download fingerprint-chromium -------
RUN set -eux; \
    echo "Downloading fingerprint-chromium ${FC_VERSION} from ${FC_URL}"; \
    curl -fL "${FC_URL}" -o /tmp/fc.tar.xz; \
    mkdir -p /opt/fingerprint-chromium; \
    tar -xJf /tmp/fc.tar.xz -C /opt/fingerprint-chromium --strip-components=1; \
    rm -f /tmp/fc.tar.xz; \
    # Link main binary as chrome for convenience
    if [ -f /opt/fingerprint-chromium/chrome ]; then ln -sf /opt/fingerprint-chromium/chrome /usr/local/bin/chrome; fi; \
    # Ensure executable permissions
    chmod +x /opt/fingerprint-chromium/chrome || true

# ------- Create non-root user -------
RUN set -eux; \
    useradd -m -s /bin/bash browser; \
    mkdir -p /home/browser/Downloads /data /profiles; \
    chown -R browser:browser /home/browser /data /profiles /opt/fingerprint-chromium

# ------- Copy startup scripts -------
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

EXPOSE 9222 5900 6080

HEALTHCHECK --interval=30s --timeout=5s --retries=5 CMD curl -sf http://127.0.0.1:${REMOTE_DEBUGGING_PORT}/json/version >/dev/null || exit 1

USER browser
WORKDIR /home/browser

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

